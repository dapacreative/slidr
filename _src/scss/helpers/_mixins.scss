//FadeIn/FadeOut - Must be used together
@mixin fade-in($duration: 0.3s, $delay: 0s, $easing: ease) {
  visibility: visible;
  opacity: 1;
  transition: opacity $duration $easing $delay;
}

@mixin fade-out($duration: 0s, $delay: 0.3s, $easing: ease) {
  visibility: hidden;
  opacity: 0;
  transition: visibility $duration $delay, opacity $delay $easing;
}

@mixin fade-in-up($duration: 0.3s, $delay: 0s, $easing: ease, $distance: 0) {
  visibility: visible;
  opacity: 1;
  transform: translateY($distance);
  transition: opacity $duration $easing $delay, transform $duration $easing;
}

@mixin fade-out-up($duration: 0s, $delay: 0.3s, $easing: ease, $distance: 30px) {
  visibility: hidden;
  opacity: 0;
  transform: translateY($distance);
  transition: visibility $duration $delay, opacity $delay $easing, transform $delay $easing;
}

@mixin fade-in-side($duration: 0.3s, $delay: 0s, $easing: ease, $distance: 0) {
  visibility: visible;
  opacity: 1;
  transform: translateX(0);
  transition: opacity $duration $easing $delay, transform $duration $easing;
}

@mixin fade-out-side($duration: 0s, $delay: 0s, $easing: ease, $distance: -30px) {
  visibility: hidden;
  opacity: 0;
  transform: translateX(-20px);
  transition: visibility $duration $delay, opacity $delay $easing, transform $delay $easing;
}

//Breakpoints
@mixin bp($point) {
  @if $point == desktop {
    @media (max-width: $dektop) { @content; }
  }
  @else if $point == tablet{
    @media (max-width: $tablet) { @content; }
  }
  @else if $point == mobile {
    @media (max-width: $mobile)  { @content; }
  }
}

// Converts px to em
@function mq-px2em($px, $base-font-size: $baseFontSize) {
  @if (unitless($px)) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels for you";
    @return mq-px2em($px + 0px); // That may fail.
  } @else if (unit($px) == em) {
    @return $px;
  }
  @return ($px / $base-font-size) * 1em;
}

// Gets an attribute from the sass mapp
@function sprite-attr($icon, $attr) {
  $icon: map-get($icons, $icon);
  @return map-get($icon, $attr);
}

@function icon-attr($icon) {
  $attr: (
    width: sprite-attr($icon, width),
    height: sprite-attr($icon, height),
    x: sprite-attr($icon, backgroundX),
    y: sprite-attr($icon, backgroundY)
  );

  @return $attr;
}

// Sets background image and size with IE fallback
%sprite {
  display: inline-block;
  background-image: url(map-get($sprite, svgPath));
  background-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));
}
%ie-sprite {
   background-image: url(map-get($sprite, pngPath));
}

// IE Sprite Mixin for when rotation is used
@mixin ie-sprite($icon, $type: all) {
  $iconMap: icon-attr($icon);

  @if $ieSprite {
    #{$ieSprite} & {
      @if $type == all {
        // Shares the PNG background
        @extend %ie-sprite;
      }
      // Outputs dimensions of icon
      @if $type == all or $type == size {
        width: map-get($iconMap, width);
        height: map-get($iconMap, height);
      }
      // Outputs background position
      @if $type == all or $type == bg {
        background-position: (map-get($iconMap, x) - $iconPadding) (map-get($iconMap, y) - $iconPadding);
      }
    }
  }
}

// For use with the gulp sprite plugin
@mixin sprite($icon, $type: all) {
  @if $type == all {
    // Shares the backgrounds
    @extend %sprite;
  }

  $iconMap: icon-attr($icon);

  // Outputs dimensions in em
  @if $type == all or $type == size {
    width: mq-px2em(map-get($iconMap, width) + 1);
    height: mq-px2em(map-get($iconMap, height) + 1);
  }

  // Outputs background position in em
  @if $type == all or $type == bg {
    background-position: mq-px2em(map-get($iconMap, x) - $iconPadding) mq-px2em(map-get($iconMap, y) - $iconPadding);
  }

  // Add ie fallback
  @include ie-sprite($icon, $type);

}